---
 - name: "Install and setup pihole dns server"
   hosts: localhost
   connection: local
   become: yes
   tasks:

     - name: "Setting hostname to dns-server"
       hostname:
         name: dns-server
 
     - name: 'Disable WIFI and Bluetooth'
       copy: src=/home/ubuntu/homelab-ansible/dns-server/raspi-blacklist.conf dest=/etc/modprobe.d/raspi-blacklist.conf mode=0600
       tags: admin

     - name: 'Set default bash aliases'
       copy: src=/home/ubuntu/homelab-ansible/dns-server/etc_profile.d_bash_aliases.sh dest=/etc/profile.d/bash_aliases.sh mode=0600
       tags: admin
 
     - name: 'Update APT package cache'
       apt:
         update_cache: yes

     - name: Install NTP
       apt:
         package: ntp
         state: present
       tags: ntp

     - name: Copy over the NTP configuration
       template: src=/home/ubuntu/homelab-ansible/dns-server/ntp.conf dest=/etc/ntp.conf
       notify:
         - restart ntp
         - force ntp update
       tags: ntp

     - name: Make sure NTP is started up
       service: name=ntp state=started enabled=yes
       tags: ntp

     - name: "Download Pi-Hole installer"
       get_url:
           url: https://install.pi-hole.net
           dest: ~/install-pihole.sh
           mode: 0740
       tags: pihole

     - name: Create pihole configuration directory
       become: True
       file:
         name="{{ fspath_pihole_config }}"
         state=directory
         owner="{{ user_pihole }}"
         group="{{ group_pihole }}"
         mode=0755
       tags: pihole

     - name: Create pihole configuration
       become: True
       template:
         src="setupVars.conf.j2"
         dest="{{ fspath_pihole_config }}/setupVars.conf"
         owner=root
         group=root
         mode=0644
       tags: pihole

     - name: Set static IP configuration
       become: True
       template:
         src="etc_network_interfaces.j2"
         dest="/etc/network/interfaces"
         owner=root
         group=root
         mode=0644
       tags: pihole

     - name: Set default DNS
       become: True
       template:
         src="etc_resolf.conf.j2"
         dest="/etc/resolv.conf"
         owner=root
         group=root
         mode=0644
       tags: admin

     - name: Install Pi-Hole
       shell: "~/install-pihole.sh --unattended"
       register: dbg_install_pihole
       tags: pihole

     - name: Set static IP configuration
       become: True
       template:
         src="etc_network_interfaces.j2"
         dest="/etc/network/interfaces"
         owner=root
         group=root
         mode=0644
       tags: admin

     - name: Set PiHole to update every week
       become: True
       replace:
         path: /etc/cron.d/pihole
         regexp: '^#(.*updatePihole.*)$'
         replace: '\1'
         backup: yes
       tags: admin

     - name: Add cloudflared user 
       user:
         name: cloudflared
         comment: cloudflared user for dns-over-https
         uid: 10001
         shell: /usr/sbin/nologin
         system: yes
         create_home: no

     - name: Allow execution of cloudflared
       file:
         path: /usr/local/bin/cloudflared
         owner: cloudflared
         mode: '+x'

     - name: Set cloudflared opts
       lineinfile:
         create: yes
         path: /etc/default/cloudflared
         regexp: '^CLOUDFLARED_OPTS='
         line: CLOUDFLARED_OPTS=--port 5053 --upstream https://1.1.1.1/dns-query --upstream https://1.0.0.1/dns-query

     - name: File ownership of etc cloudflared
       file:
         path: /etc/default/cloudflared
         owner: cloudflared

     - name: File ownership of cloudflared bin
       file:
         path: /usr/local/bin/cloudflared
         owner: cloudflared

     - name: copy cloudflared bin to /usr/local/bin
       copy:
         src: "/home/ubuntu/homelab-ansible/bin/cloudflared"
         dest: "/usr/local/bin/cloudflared"

     - name: copy cloudflared systemd .service file
       copy:
         src: "/home/ubuntu/homelab-ansible/dns-server/cloudflared.service"
         dest: "/etc/systemd/system/cloudflared.service"

     - name: enable service httpd and ensure it is not masked
       systemd:
         name: cloudflared
         state: started
         enabled: yes

     - name: 'Reboot'
       shell: sleep 2 && reboot
       async: 1
       poll: 0
       ignore_errors: true
       tags: pihole

     - name: "Wait for Raspberry PI to come back"
       local_action: wait_for host={{ ansible_host }} port=22 state=started delay=10
       become: false 
